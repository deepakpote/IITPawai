from __future__ import unicode_literals

from django.db import models
from django.core.validators import RegexValidator
from django.utils import timezone
from commons.models import district 
from idlelib.IOBinding import blank_re

# user model
class user(models.Model):
    userID = models.AutoField(primary_key = True)
     
    phoneRegex = RegexValidator(regex=r'^\+?1?\d{10,15}$', message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.")
    phoneNumber = models.CharField(null = False, unique = True, max_length = 15, validators = [phoneRegex]) 
     
    userName = models.CharField(max_length = 100, null = False)
    photoUrl = models.CharField(max_length = 255, null = True, blank = True)
    udiseCode = models.CharField(max_length = 255, null = True, blank = True)
    emailID = models.EmailField(max_length = 100, null = True, blank = True)
     
    #preferredLanguage = models.ForeignKey('language', db_column = 'preferredLanguageID', null = False, related_name='user_preferredLanguage')
    district = models.ForeignKey('commons.district', db_column = 'districtID', null = False, related_name="user_district")
     
    createdBy = models.ForeignKey('user', null = True, related_name='user_createdBy', db_column = 'createdBy')
    createdOn = models.DateTimeField(auto_now_add=True)
    modifiedBy = models.ForeignKey('user', null = True, related_name='user_modifiedBy', db_column = 'modifiedBy')
    modifiedOn = models.DateTimeField(auto_now_add=True)
    
    USERNAME_FIELD = 'phoneNumber'
    REQUIRED_FIELDS = ['name',]
 
    def is_anonymous(self):
        """
        Always return False. This is a way of comparing User objects to
        anonymous users.
        """
        return False
    
    def is_authenticated(self):
        """
        Always return True. This is a way to tell if the user has been
        authenticated in templates.
        """
        return True
    
    class Meta:
        db_table = 'usr_User'
        get_latest_by = 'userName'

class otp(models.Model):
    otpID = models.AutoField(primary_key=True)
    phoneRegex = RegexValidator(regex=r'^\+?1?\d{10,15}$', message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.")
    phoneNumber = models.CharField(validators = [phoneRegex], null = False, max_length = 15)
    otp = models.CharField(max_length=6, null = False, blank = True) # cannot be stored as null into DB, but input can be blank, as this is autogenerated

    createdOn = models.DateTimeField(auto_now=False, auto_now_add=True)
    modifiedOn = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = 'usr_Otp'

class token(models.Model):
    tokenID = models.AutoField(primary_key=True)
    user = models.ForeignKey('user', related_name='token_user', db_column = 'userID')
    token = models.CharField(max_length = 255, unique=True)

    createdOn = models.DateTimeField(auto_now=False, auto_now_add=True)
    modifiedOn = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = 'usr_Token'
                 
class userAuth(models.Model):
    userAuthID = models.AutoField(primary_key = True)
    loginID = models.IntegerField(unique = True)
    password = models.CharField(max_length = 256, null = True)
    sessionToken = models.CharField(max_length = 256, null = True)
    lastLoggedInOn = models.DateTimeField(auto_now_add=True)
     
    createdBy = models.ForeignKey('user', related_name='userAuth_createdBy', db_column = 'createdBy')
    createdOn = models.DateTimeField(auto_now_add=True)
    modifiedBy = models.ForeignKey('user', related_name='userAuth_modifiedBy', db_column = 'modifiedBy')
    modifiedOn = models.DateTimeField(auto_now_add=True)
     
    class Meta:
        db_table = 'usr_userAuth'
     
class language(models.Model):
    languageID = models.AutoField(primary_key = True)
    languageName =  models.CharField(max_length = 256)
    resourceCode = models.CharField(max_length = 3)
    
    class Meta:
        db_table = 'com_Language'
        get_latest_by = 'userName'
        
